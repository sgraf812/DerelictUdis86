/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license ( the "Software" ) to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.udis86.functions;

import std.stdint;
import std.c.stdio;
import derelict.udis86.types;

extern(C) nothrow
{    
    alias void function(ud*) da_ud_init;
    alias void function(ud*, uint8_t) da_ud_set_mode;
    alias void function(ud*, uint64_t) da_ud_set_pc;
    alias void function(ud*, input_hook_t) da_ud_set_input_hook;
    alias void function(ud*, const (uint8_t)*, size_t) da_ud_set_input_buffer;
    alias void function(ud*, FILE*) da_ud_set_input_file;
    alias void function(ud*, uint) da_ud_set_vendor;
    alias void function(ud*, translator_t) da_ud_set_syntax;
    alias void function(ud*, size_t) da_ud_input_skip;
    alias int function(const ud*) da_ud_input_end;
    alias uint function(ud*) da_ud_decode;
    alias uint function(ud*) da_ud_disassemble;
    alias void function(ud*) da_ud_translate_intel;
    alias void function(ud*) da_ud_translate_att;
    alias const(ubyte)* function(const ud* u) da_ud_insn_asm;
    alias const(uint8_t)* function(const ud* u) da_ud_insn_ptr;
    alias uint64_t function(const ud*) da_ud_insn_off;
    alias const(ubyte)* function(ud*) da_ud_insn_hex;
    alias uint function(const ud* u) da_ud_insn_len;
    alias const(ud_operand)* function(const ud *u, uint n) da_ud_insn_opr;
    alias int function(const ud_operand *opr) da_ud_opr_is_sreg;
    alias int function(const ud_operand *opr) da_ud_opr_is_gpr;
    alias const(ubyte)* function(ud_mnemonic_code c) da_ud_lookup_mnemonic;
    alias void function(ud*, void*) da_ud_set_user_opaque_data;
    alias void* function(const ud*) da_ud_get_user_opaque_data;
    alias void function(ud *u, char *buf, size_t size) da_ud_set_asm_buffer;
    alias void function(ud *u, sym_resolver_t) da_ud_set_sym_resolver;
}

__gshared
{
    da_ud_init ud_init;
    da_ud_set_mode ud_set_mode;
    da_ud_set_pc ud_set_pc;
    da_ud_set_input_hook ud_set_input_hook;
    da_ud_set_input_buffer ud_set_input_buffer;
    da_ud_set_input_file ud_set_input_file;
    da_ud_set_vendor ud_set_vendor;
    da_ud_set_syntax ud_set_syntax;
    da_ud_input_skip ud_input_skip;
    da_ud_input_end ud_input_end;
    da_ud_decode ud_decode;
    da_ud_disassemble ud_disassemble;
    da_ud_translate_intel ud_translate_intel;
    da_ud_translate_att ud_translate_att;
    da_ud_insn_asm ud_insn_asm;
    da_ud_insn_ptr ud_insn_ptr;
    da_ud_insn_off ud_insn_off;
    da_ud_insn_hex ud_insn_hex;
    da_ud_insn_len ud_insn_len;
    da_ud_insn_opr ud_insn_opr;
    da_ud_opr_is_sreg ud_opr_is_sreg;
    da_ud_opr_is_gpr ud_opr_is_gpr;
    da_ud_lookup_mnemonic ud_lookup_mnemonic;
    da_ud_set_user_opaque_data ud_set_user_opaque_data;
    da_ud_get_user_opaque_data ud_get_user_opaque_data;
    da_ud_set_asm_buffer ud_set_asm_buffer;
    da_ud_set_sym_resolver ud_set_sym_resolver;
}

alias ud_translate_intel UD_SYN_INTEL;
alias ud_translate_att UD_SYN_ATT;